apiVersion: apps/v1
kind: Deployment
metadata:
  name: {deployment_name}
  namespace: {service_namespace}
  labels:
    app: {service_name}
    analitico.ai/workspace-id: {workspace_id}
  ownerReferences:
  - apiVersion: v1
    blockOwnerDeletion: true
    kind: Service
    name: {service_name}
    uid: {owner_uid}
spec:
  selector:
    matchLabels:
      app: {service_name}
  template:
    metadata:
      namespace: {service_namespace}
      labels:
        app: {service_name}
        analitico.ai/workspace-id: {workspace_id}
    spec:
      containers:
      - image: eu.gcr.io/analitico-api/analitico-client:jupyter-test
        name: {pod_name}
        command: ["/app/tasks/jupyter-start.sh"]
        env:
        - name: PORT
          value: "8080"
        - name: ANALITICO_DRIVE
          value: /mnt/analitico-drive
        - name: ANALITICO_JUPYTER_TOKEN
          valueFrom:
            secretKeyRef:
              name: {secret_name}
              key: token
        - name: JUPYTER_MEM_LIMIT_BYTES
          value: "{jupyter_mem_limit_bytes}"
        resources:
          requests:
            cpu: {cpu_request}
            memory: {memory_request}
            nvidia.com/gpu: {gpu_request}
          limits:
            cpu: {cpu_limit}
            memory: {memory_limit}
            nvidia.com/gpu: {gpu_limit}
        volumeMounts:
        - name: analitico-drive
          mountPath: /mnt/analitico-drive
          readOnly: false
      volumes:
      - name: analitico-drive
        flexVolume:
          driver: "fstab/cifs"
          fsType: "cifs"
          secretRef:
            name: analitico-drive-{workspace_id_slug}
          options:
            networkPath: {volume_network_path}
            mountOptions: dir_mode=0755,file_mode=0644,noperm
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {route_name}
  namespace: knative-serving
  labels:
    app: {service_name}
    analitico.ai/workspace-id: {workspace_id}
  ownerReferences:
  - apiVersion: v1
    blockOwnerDeletion: true
    kind: Service
    name: {service_name}
    uid: {owner_uid}
spec:
  gateways:
  - knative-ingress-gateway
  - mesh
  hosts:
  - "{service_name}.cloud.analitico.ai"
  - "{service_name}.cloud.svc.cluster.local"
  http:
  - match:
    - authority:
        regex: ^{service_name}\.cloud(?::\d{{1,5}})?$
    - authority:
        regex: ^{service_name}\.cloud\.analitico\.ai(?::\d{{1,5}})?$
    - authority:
        regex: ^{service_name}\.cloud\.svc(?::\d{{1,5}})?$
    - authority:
        regex: ^{service_name}\.cloud\.svc\.cluster\.local(?::\d{{1,5}})?$
    retries:
      attempts: 3
      perTryTimeout: 10m0s
    route:
    - destination:
        host: "{service_name}.cloud.svc.cluster.local"
        port:
          number: 80
    timeout: 10m0s
    websocketUpgrade: true
---