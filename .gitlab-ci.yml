
image: docker:latest

# GitLab Build and Deploy to a Server via SSH
# https://codeburst.io/gitlab-build-and-push-to-a-server-via-ssh-6d27ca1bf7b4

variables:
  GCP_PROJECT_ID: analitico-api
  GCP_ZONE: europe-west1
  BUILD_IMAGE_URL: registry.gitlab.com/analitico/analitico:$CI_COMMIT_SHA

services:
- docker:dind

stages:
  - build
  - deploy

cache:
  paths:
    - pip-cache

build_dev:
  stage: build
  script:
    - apk update && apk add git
    # remove repo
    - rm -rf /builds/analitico/analitico
    - mkdir -p /builds/analitico/
    - cd /builds/analitico/
    # clone with submodule 
    - echo "https://giovannizorzato:$PULL_TOKEN@github.com/analitico/analitico.git" > /.git-credentials
    - echo "https://giovannizorzato:$PULL_TOKEN@github.com/analitico/analitico-sdk.git" >> /.git-credentials
    - echo "https://giovannizorzato:$PULL_TOKEN@github.com/Supermercato24/analitico-s24.git" >> /.git-credentials
    # save credentials to bypass login when fetching submodules
    - git config --global credential.helper 'store --file=/.git-credentials'
    # clone the repo
    - git clone --recurse-submodules https://giovannizorzato:$PULL_TOKEN@github.com/analitico/analitico.git 
    - cd analitico
    # check out corrent commit
    - git checkout --recurse-submodules $CI_COMMIT_SHA
    # remove credentials
    - rm /.git-credentials
    # login to registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    # export ANALITICO ENV
    - export -p | grep ANALITICO_ > analitico-env
    # add commit sha to the env
    - echo declare -x ANALITICO_COMMIT_SHA="$CI_COMMIT_SHA" >> analitico-env 
    # build docker image
    - docker build --pull -t $BUILD_IMAGE_URL .
    # push the image to gitlab registry
    - docker push $BUILD_IMAGE_URL
  only:
    - master

deploy-staging:
  stage: deploy
  image: ubuntu:18.04
  only:
    - "master"
  environment: staging
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - mkdir -p ~/.ssh
    - echo "$STAGING_PRIVATE_KEY" | base64 -d -w0 | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa
  script:
    # pull new docker image and run
    - ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$STAGING_SERVER_NAME "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}; docker pull registry.gitlab.com/analitico/analitico:$CI_COMMIT_SHA; docker stop analitico; docker rm analitico; docker run --name=analitico -d -p 80:80 -p 443:443 ${CI_REGISTRY}/${CI_PROJECT_PATH}:$CI_COMMIT_SHA ./run.sh; docker image prune -f -a"

deploy-production:
  stage: deploy
  when: manual
  image: ubuntu:18.04
  only:
    - master
  before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - mkdir -p ~/.ssh
  - echo "$PRODUCTION_PRIVATE_KEY" | base64 -d -w0 | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-add ~/.ssh/id_rsa
  script:
    # pull new docker image and run
    - ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$PRODUCTION_SERVER_NAME "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}; docker pull registry.gitlab.com/analitico/analitico:$CI_COMMIT_SHA; docker stop analitico; docker rm analitico; docker run --name=analitico -d -p 80:80 -p 443:443 ${CI_REGISTRY}/${CI_PROJECT_PATH}:$CI_COMMIT_SHA ./run.sh; docker image prune -f -a"
