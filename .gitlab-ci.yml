
image: docker:latest

# GitLab Build and Deploy to a Server via SSH
# https://codeburst.io/gitlab-build-and-push-to-a-server-via-ssh-6d27ca1bf7b4

variables:
  GCP_PROJECT_ID: analitico-api
  GCP_ZONE: europe-west1
  BUILD_IMAGE_URL: registry.gitlab.com/analitico/analitico:$CI_COMMIT_SHA
  BUILD_JUPYTER_IMAGE_URL: registry.gitlab.com/analitico/analitico:$CI_COMMIT_SHA-jupyter

services:
- docker:dind

stages:
  - build
  - deploy

cache:
  paths:
    - pip-cache

build_dev:
  stage: build
  script:
    - apk update && apk add git
    # remove repo
    - rm -rf /builds/analitico/analitico
    - mkdir -p /builds/analitico/
    - cd /builds/analitico/
    # clone with submodule 
    - echo "https://giovannizorzato:$PULL_TOKEN@github.com/analitico/analitico.git" > /.git-credentials
    - echo "https://giovannizorzato:$PULL_TOKEN@github.com/analitico/analitico-app.git " >> /.git-credentials
    # save credentials to bypass login when fetching submodules
    - git config --global credential.helper 'store --file=/.git-credentials'
    # clone the repo
    - git clone --recurse-submodules https://giovannizorzato:$PULL_TOKEN@github.com/analitico/analitico.git 
    - cd analitico
    # pwd /builds/analitico/analitico
    # check out corrent commit because repo may have gone further
    - git checkout --recurse-submodules $CI_COMMIT_SHA
    # clone secrets
    - git clone https://giovannizorzato:$PULL_TOKEN@github.com/analitico/analitico-ci.git 
    # we have /builds/analitico/analitico-ci
    # remove credentials
    - rm /.git-credentials
    # add commit sha to the env script
    - echo declare -x ANALITICO_COMMIT_SHA="$CI_COMMIT_SHA" >> analitico-ci/analitico-env.sh
    # login to registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    # build docker image
    - echo "$(date +'%T') - Build analitico image"
    - docker build --pull -t $BUILD_IMAGE_URL .
    - echo "$(date +'%T') - Finished building analitico image"
    # push the image to gitlab registry
    - docker push $BUILD_IMAGE_URL
    - echo "$(date +'%T') - Finished pushing analitico image"
    # build docker jupyter image with same venv
    - echo "$(date +'%T') - Build analitico jupyter image"
    - docker build --pull -t $BUILD_JUPYTER_IMAGE_URL -f DockerfileJupyter .
    - echo "$(date +'%T') - Finished building analitico jupyter image"
    # push docker jupyter
    - docker push $BUILD_JUPYTER_IMAGE_URL
    - echo "$(date +'%T') - Finished pushing analitico jupyter image"
    # remove secrets
    - rm -R -f analitico-ci
  only:
    - master

deploy-production:
  stage: deploy
  when: manual
  image: ubuntu:18.04
  only:
    - master
  before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - mkdir -p ~/.ssh
  - echo "$PRODUCTION_PRIVATE_KEY" | base64 -d -w0 | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-add ~/.ssh/id_rsa
  script:
    # pull new docker image and run
    - ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$PRODUCTION_SERVER_NAME "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}; 
      docker pull registry.gitlab.com/analitico/analitico:$CI_COMMIT_SHA; 
      docker stop analitico; docker rm analitico; 
      docker run --name=analitico --init --restart always -d -p 80:80 -p 443:443 ${CI_REGISTRY}/${CI_PROJECT_PATH}:$CI_COMMIT_SHA ./run.sh; 
      docker image prune -f -a"


deploy-staging:
  stage: deploy
  image: ubuntu:18.04
  only:
    - master
  before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - mkdir -p ~/.ssh
  - echo "$S6_PRIVATE_KEY" | base64 -d -w0 | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-add ~/.ssh/id_rsa
  script:
    # pull new docker image and run
    # start 2 dockers for jupyter notebook
    - ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$GPU_SERVER_NAME "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}; 
      docker pull registry.gitlab.com/analitico/analitico:$CI_COMMIT_SHA; 
      docker pull registry.gitlab.com/analitico/analitico:$CI_COMMIT_SHA-jupyter; 
      docker stop analitico; 
      docker rm analitico; 
      docker run --name=analitico --init --runtime=nvidia --restart always -d -p 80:80 -p 443:443 ${CI_REGISTRY}/${CI_PROJECT_PATH}:$CI_COMMIT_SHA ./run.sh; 
      docker stop aj-s24; 
      docker rm aj-s24; 
      docker stop aj-generic; 
      docker rm aj-generic; 
      docker run --name=aj-s24 --init --runtime=nvidia --restart always -d -p 8810:8888 ${CI_REGISTRY}/${CI_PROJECT_PATH}:$CI_COMMIT_SHA-jupyter ./docker-jupyter.sh c4fc482ab13154d49858c69c199710bf49cb0f5bfb888af6; 
      docker run --name=aj-generic --init --runtime=nvidia --restart always -d -p 8811:8888 ${CI_REGISTRY}/${CI_PROJECT_PATH}:$CI_COMMIT_SHA-jupyter ./docker-jupyter.sh 60050b00887fd4032e1e9dbf8fdb7b9f8506fa6ec151cdd3; 
      docker image prune -f -a;" 