
image: docker:latest

# GitLab Build and Deploy to a Server via SSH
# https://codeburst.io/gitlab-build-and-push-to-a-server-via-ssh-6d27ca1bf7b4

variables:
  BUILD_ANALITICO_IMAGE_URL: eu.gcr.io/analitico-api/analitico:$CI_COMMIT_SHA
  BUILD_ANALITICO_CLIENT_IMAGE_URL: eu.gcr.io/analitico-api/analitico-client:$CI_COMMIT_SHA
  BUILD_JUPYTER_IMAGE_URL: eu.gcr.io/analitico-api/analitico-jupyter:$CI_COMMIT_SHA 
  GIT_STRATEGY: none
  
services:
- docker:dind

stages:
  - build
  - deploy-staging
  - deploy-production

cache:
  paths:
    - pip-cache

build-and-test:
  stage: build
  script:
    # install dependecies
    - apk add git bash curl python
    - curl https://sdk.cloud.google.com > script.sh
    - chmod +x script.sh
    - ./script.sh --disable-prompts
    - export PATH=/root/google-cloud-sdk/bin:$PATH
    # work directory
    - export WORKDIR=/builds/analitico/
    # setup the environment
    # cleanup
    - cd $WORKDIR
    - rm -rf $WORKDIR/*
    # clone with submodule 
    - echo "https://giovannizorzato:$GITHUB_PULL_TOKEN@github.com/analitico/analitico.git" > /.git-credentials
    - echo "https://giovannizorzato:$GITHUB_PULL_TOKEN@github.com/analitico/analitico-app.git " >> /.git-credentials
    - echo "https://giovannizorzato:$GITHUB_PULL_TOKEN@github.com/analitico/analitico-sdk.git " >> /.git-credentials
    # save credentials to bypass login when fetching submodules
    - git config --global credential.helper 'store --file=/.git-credentials'
    # clone the repo
    - git clone --recurse-submodules https://giovannizorzato:$GITHUB_PULL_TOKEN@github.com/analitico/analitico.git 
    - cd analitico
    # pwd /builds/analitico/analitico
    # check out corrent commit because repo may have gone further
    - git checkout --recurse-submodules $CI_COMMIT_SHA
    #Â go back
    - cd ..
    # clone secrets
    - git clone https://giovannizorzato:$GITHUB_PULL_TOKEN@github.com/analitico/analitico-ci.git 
    # we have /builds/analitico/analitico-ci
    # remove credentials
    - rm /.git-credentials
    # add commit sha to the env script
    - echo export ANALITICO_COMMIT_SHA="$CI_COMMIT_SHA" >> analitico-ci/analitico-env.sh
    # authentication for Google Cloud Container Registry
    - gcloud -q auth activate-service-account --key-file ./analitico-ci/gcloud/analitico-api-service-account-key.json
    - gcloud -q auth configure-docker
    ##
    # build analitico image
    ##
    - cd $WORKDIR
    - echo "$(date +'%T') - Build analitico image"
    - cp ./analitico/serverless/templates/analitico/Dockerfile ./Dockerfile
    - docker build --no-cache --pull -t $BUILD_ANALITICO_IMAGE_URL -f Dockerfile .
    - echo "$(date +'%T') - Finished building analitico image"
    - docker push $BUILD_ANALITICO_IMAGE_URL
    - echo "$(date +'%T') - Finished pushing analitico image"
    ##
    # build analitico-client image
    ##
    - cd $WORKDIR
    - echo "$(date +'%T') - Build analitico-client image"
    - build_dir=$(mktemp -d)
    # docker image expects to find sdk and s24 in that path
    - cp -Rf ./analitico/sdk/analitico $build_dir
    - cp -Rf ./analitico/source/s24 $build_dir
    - cp -R ./analitico/serverless/templates/analitico-client/* $build_dir/
    - cd $build_dir
    - docker build --no-cache --pull -t $BUILD_ANALITICO_CLIENT_IMAGE_URL -f Dockerfile .
    - #cleanup
    - rm -Rf $build_dir
    - echo "$(date +'%T') - Finished building analitico-client image"
    - docker push $BUILD_ANALITICO_CLIENT_IMAGE_URL
    - echo "$(date +'%T') - Finished pushing analitico-client image"
    ##
    # build jupyter image
    ##
    - cd $WORKDIR
    - echo "$(date +'%T') - Build analitico-jupyter image"
    - cp ./analitico/serverless/templates/analitico/DockerfileJupyter ./DockerfileJupyter
    - docker build --pull -t $BUILD_JUPYTER_IMAGE_URL -f DockerfileJupyter .
    - echo "$(date +'%T') - Finished building analitico-jupyter image"
    - docker push $BUILD_JUPYTER_IMAGE_URL
    - echo "$(date +'%T') - Finished pushing analitico-jupyter image"
    ## 
    # remove secrets
    ## 
    - rm -R -f analitico-ci
  only:
    - master

website-s6:
  stage: deploy-staging
  image: ubuntu:18.04
  only:
    - master
  before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - mkdir -p ~/.ssh
  - echo "$STAGING_PRIVATE_KEY" | base64 -d -w0 | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-add ~/.ssh/id_rsa
  script:
    # pull new docker image and run
    # start 2 dockers for jupyter notebook
    - ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$STAGING_SERVER_NAME "export PATH=/root/google-cloud-sdk/bin:$PATH; gcloud -q auth activate-service-account --key-file /gcloud/analitico-api-service-account-key.json; gcloud -q auth configure-docker;
      docker pull ${BUILD_ANALITICO_IMAGE_URL}; 
      docker stop analitico; 
      docker rm analitico; 
      docker run --name=analitico --init --runtime=nvidia --restart always -d -p 80:80 -p 443:443 ${BUILD_IMAGE_URL} ./scripts/website-start.sh; 
      docker image prune -f -a;" 

website-k8:
  stage: deploy-staging
  image: google/cloud-sdk:latest
  only:
    - master
  script:
    - git clone https://giovannizorzato:$GITHUB_PULL_TOKEN@github.com/analitico/analitico-ci.git 
    - gcloud -q auth activate-service-account --key-file ./analitico-ci/gcloud/analitico-api-service-account-key.json
    - export KUBECONFIG="./analitico-ci/k8/admin.conf"
    - yaml=`cat ./analitico-ci/k8/service-staging.yaml`
    - echo "${yaml/"{docker_image}"/$BUILD_ANALITICO_IMAGE_URL}" > service-staging.yaml
    - cat service-staging.yaml
    - kubectl apply --filename ./service-staging.yaml

website:
  stage: deploy-production
  image: google/cloud-sdk:latest
  when: manual
  only:
    - master
  script:
    - git clone https://giovannizorzato:$GITHUB_PULL_TOKEN@github.com/analitico/analitico-ci.git 
    - gcloud -q auth activate-service-account --key-file ./analitico-ci/gcloud/analitico-api-service-account-key.json
    - export KUBECONFIG="./analitico-ci/k8/admin.conf"
    - yaml=`cat ./analitico-ci/k8/service.yaml`
    - echo "${yaml/"{docker_image}"/$BUILD_ANALITICO_IMAGE_URL}" > service.yaml
    - cat service.yaml
    - kubectl apply --filename ./service.yaml

worker-staging:
  stage: deploy-staging
  image: ubuntu:18.04
  when: manual
  only:
    - master
  before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - mkdir -p ~/.ssh
  - echo "$STAGING_PRIVATE_KEY" | base64 -d -w0 | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-add ~/.ssh/id_rsa

  # it creates a useless container "analitico-worker-keep-jupyter-image"
  # to keep the image "-jupyter" that is used for the papermill dockers
  # otherwise "docker image prune -f -a" will remove the image (because it has no containers associated)

  script:
    - ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$STAGING_SERVER_NAME "export PATH=/root/google-cloud-sdk/bin:$PATH; gcloud -q auth activate-service-account --key-file /gcloud/analitico-api-service-account-key.json; gcloud -q auth configure-docker;
      docker pull ${BUILD_ANALITICO_IMAGE_URL}; 
      docker pull ${BUILD_JUPYTER_IMAGE_URL}; 
      docker stop analitico-worker-staging1; 
      docker rm  analitico-worker-staging1; 
      docker rm analitico-worker-staging-keep-jupyter-image; 
      docker run --name=analitico-worker-staging1 --init --runtime=nvidia --restart always -d -v /var/run/docker.sock:/var/run/docker.sock ${BUILD_ANALITICO_IMAGE_URL} ./scripts/worker-start.sh --tags staging; 
      docker create --name=analitico-worker-staging-keep-jupyter-image ${BUILD_JUPYTER_IMAGE_URL};"     

worker-production:
  stage: deploy-production
  when: manual
  image: ubuntu:18.04
  only:
    - master
  before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - mkdir -p ~/.ssh
  - echo "$STAGING_PRIVATE_KEY" | base64 -d -w0 | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-add ~/.ssh/id_rsa

  # it creates a useless container "analitico-worker-keep-jupyter-image"
  # to keep the image "-jupyter" that is used for the papermill dockers
  # otherwise "docker image prune -f -a" will remove the image (because it has no containers associated)

  script:
    - ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$STAGING_SERVER_NAME "export PATH=/root/google-cloud-sdk/bin:$PATH; gcloud -q auth activate-service-account --key-file /gcloud/analitico-api-service-account-key.json; gcloud -q auth configure-docker;
      docker pull ${BUILD_ANALITICO_IMAGE_URL}; 
      docker pull ${BUILD_JUPYTER_IMAGE_URL}; 
      docker stop analitico-worker1; 
      docker rm analitico-worker1; 
      docker stop analitico-worker2; 
      docker rm analitico-worker2; 
      docker stop analitico-worker3; 
      docker rm analitico-worker3; 
      docker rm analitico-worker-keep-jupyter-image; 
      docker run --name=analitico-worker1 --init --runtime=nvidia --restart always -d -v /var/run/docker.sock:/var/run/docker.sock ${BUILD_ANALITICO_IMAGE_URL} ./scripts/worker-start.sh; 
      docker run --name=analitico-worker2 --init --runtime=nvidia --restart always -d -v /var/run/docker.sock:/var/run/docker.sock ${BUILD_ANALITICO_IMAGE_URL} ./scripts/worker-start.sh; 
      docker run --name=analitico-worker3 --init --runtime=nvidia --restart always -d -v /var/run/docker.sock:/var/run/docker.sock ${BUILD_ANALITICO_IMAGE_URL} ./scripts/worker-start.sh; 
      docker create --name=analitico-worker-keep-jupyter-image ${BUILD_JUPYTER_IMAGE_URL};
      docker image prune -f -a;" 


live-tests:
  stage: deploy-production
  image: ubuntu:18.04
  only:
    - master
  before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - mkdir -p ~/.ssh
  - echo "$STAGING_PRIVATE_KEY" | base64 -d -w0 | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-add ~/.ssh/id_rsa

  # it creates a useless container "analitico-worker-keep-jupyter-image"
  # to keep the image "-jupyter" that is used for the papermill dockers
  # otherwise "docker image prune -f -a" will remove the image (because it has no containers associated)

  script:
    - ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$STAGING_SERVER_NAME "export PATH=/root/google-cloud-sdk/bin:$PATH; gcloud -q auth activate-service-account --key-file /gcloud/analitico-api-service-account-key.json; gcloud -q auth configure-docker;
      docker pull ${BUILD_ANALITICO_IMAGE_URL}; 
      docker stop analitico-live-tests; 
      docker rm  analitico-live-tests; 
      docker run --name=analitico-live-tests --restart always -d -v /var/run/docker.sock:/var/run/docker.sock ${BUILD_ANALITICO_IMAGE_URL} ./scripts/live-tests.sh;"
    

jupyter-old:
  stage: deploy-production
  image: ubuntu:18.04
  when: manual
  only:
    - master
  before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - mkdir -p ~/.ssh
  - echo "$STAGING_PRIVATE_KEY" | base64 -d -w0 | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-add ~/.ssh/id_rsa
  script:
    # pull new docker image and run
    # start 2 dockers for jupyter notebook
    - ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$STAGING_SERVER_NAME "export PATH=/root/google-cloud-sdk/bin:$PATH; gcloud -q auth activate-service-account --key-file /gcloud/analitico-api-service-account-key.json; gcloud -q auth configure-docker;
      docker pull ${BUILD_JUPYTER_IMAGE_URL}; 
      docker stop aj-s24; 
      docker rm aj-s24; 
      docker stop aj-generic; 
      docker rm aj-generic; 
      docker run --name=aj-s24 --init --runtime=nvidia --restart always -d -p 8810:8888 ${BUILD_JUPYTER_IMAGE_URL} ./docker-jupyter.sh c4fc482ab13154d49858c69c199710bf49cb0f5bfb888af6; 
      docker run --name=aj-generic --init --runtime=nvidia --restart always -d -p 8811:8888 ${BUILD_JUPYTER_IMAGE_URL} ./docker-jupyter.sh 60050b00887fd4032e1e9dbf8fdb7b9f8506fa6ec151cdd3; 
      docker image prune -f -a;" 